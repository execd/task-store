package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/wayofthepie/task-store/pkg/model"

import uuid "github.com/satori/go.uuid"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// GetTask provides a mock function with given fields: id
func (_m *Store) GetTask(id *uuid.UUID) (*model.Spec, error) {
	ret := _m.Called(id)

	var r0 *model.Spec
	if rf, ok := ret.Get(0).(func(*uuid.UUID) *model.Spec); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Spec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MoveTaskToExecutingSet provides a mock function with given fields: id
func (_m *Store) MoveTaskToExecutingSet(id *uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PopNextTask provides a mock function with given fields:
func (_m *Store) PopNextTask() (*uuid.UUID, error) {
	ret := _m.Called()

	var r0 *uuid.UUID
	if rf, ok := ret.Get(0).(func() *uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Schedule provides a mock function with given fields: id
func (_m *Store) Schedule(id *uuid.UUID) (*uuid.UUID, error) {
	ret := _m.Called(id)

	var r0 *uuid.UUID
	if rf, ok := ret.Get(0).(func(*uuid.UUID) *uuid.UUID); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreTask provides a mock function with given fields: _a0
func (_m *Store) StoreTask(_a0 model.Spec) (*uuid.UUID, error) {
	ret := _m.Called(_a0)

	var r0 *uuid.UUID
	if rf, ok := ret.Get(0).(func(model.Spec) *uuid.UUID); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Spec) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
